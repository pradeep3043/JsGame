'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _utils = require('./utils');

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Utility for pinging the api. Allows checking for connection to the platofrm. Meant to be used directly form the {@link Syncano} instance.
*
* @constructor
* @type {Pinger}
*
* @example {@lang javascript}
* const connection = Syncano();
* connection.Monitor.startMonitoring();
* connection.Monitor.on('connected', () => {
*    // connected to the api
* });
* connection.Monitor.on('disconnected', (error) => {
*    // disconnected from the api
* });
*/

var Pinger = (0, _stampit2.default)().compose(_request2.default, _utils.EventEmittable).props({
  timeout: 5000,
  interval: null,
  connected: null
}).methods({
  request: function request() {
    var path = this.getConfig().getBaseUrl();
    return this.makeRequest('GET', path);
  },
  startMonitoring: function startMonitoring() {
    var _this = this;

    this.interval = setInterval(function () {
      return _this.ping();
    }, this.timeout);
  },
  ping: function ping() {
    var _this2 = this;

    this.request().then(function () {
      if (!_this2.connected) {
        _this2.connected = true;
        _this2.emit('connected');
      }
    }).catch(function (error) {
      if (_this2.connected) {
        _this2.connected = false;
        _this2.emit('disconnected', error);
      }
    });
  },
  stopMonitoring: function stopMonitoring() {
    clearInterval(this.interval);
  }
});

exports.default = Pinger;
module.exports = exports['default'];