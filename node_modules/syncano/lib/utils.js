'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = exports.ConstraintsMixin = exports.MetaMixin = exports.ConfigMixin = exports.EventEmittable = undefined;

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _eventemitter = require('./eventemitter');

var _eventemitter2 = _interopRequireDefault(_eventemitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Simple wrapper around `EventEmitter`
 * @constructor
 * @type {EventEmittable}

 * @example {@lang javascript}
 * var EmittableModel = stampit().compose(EventEmittable);
 */
var EventEmittable = exports.EventEmittable = _stampit2.default.convertConstructor(_eventemitter2.default);

/**
 * Used as a manager for {@link Syncano} base object. **Not** meant to be used directly.
 * @constructor
 * @type {ConfigMixin}

 * @property {Syncano} _config private attribute which holds {@link Syncano} object

 * @example {@lang javascript}
 * var MyStamp = stampit().compose(ConfigMixin);
 */
var ConfigMixin = exports.ConfigMixin = (0, _stampit2.default)({
  methods: {
    /**
    * Gets default properties.
     * @memberOf ConfigMixin
    * @instance
    * @returns {Object}
     * @example {@lang javascript}
    * var MyStamp = stampit().compose(ConfigMixin);
    * var config = MyStamp().getDefaultProperties();
     */

    getDefaultProperties: function getDefaultProperties() {
      return this._config.defaults;
    },


    /**
    * Sets config.
     * @memberOf ConfigMixin
    * @instance
     * @param {Syncano} config instance of {@link Syncano} object
    * @returns {ConfigMixin}
     * @example {@lang javascript}
    * var MyStamp = stampit().compose(ConfigMixin);
    * var newObject = MyStamp().setConfig({});
     */
    setConfig: function setConfig(config) {
      this._config = config;
      return this;
    },


    /**
    * Gets config.
     * @memberOf ConfigMixin
    * @instance
    * @returns {Syncano}
     * @example {@lang javascript}
    * var MyStamp = stampit().compose(ConfigMixin);
    * var config = MyStamp().getConfig();
     */
    getConfig: function getConfig() {
      return this._config;
    }
  },

  static: {
    getDefaultProperties: function getDefaultProperties() {
      return this.fixed.refs._config.defaults;
    },


    /**
    * Sets config and returns new {@link https://github.com/stampit-org/stampit|stampit} definition.
     * @memberOf ConfigMixin
    * @static
     * @param {Syncano} config instance of {@link Syncano} object
    * @returns {stampit}
     * @example {@lang javascript}
    * var MyStamp = stampit().compose(ConfigMixin).setConfig({});
     */
    setConfig: function setConfig(config) {
      return this.refs({ _config: config });
    },


    /**
    * Gets config from {@link https://github.com/stampit-org/stampit|stampit} definition.
     * @memberOf ConfigMixin
    * @static
    * @returns {Syncano}
     * @example {@lang javascript}
    * var config = stampit().compose(ConfigMixin).getConfig();
     */
    getConfig: function getConfig() {
      return this.fixed.refs._config;
    }
  }
});

/**
 * Used as a manager for {@link Meta} object. **Not** meant to be used directly.
 * @constructor
 * @type {MetaMixin}

 * @property {Object} _meta private attribute which holds {@link Meta} object

 * @example {@lang javascript}
 * var MyStamp = stampit().compose(MetaMixin);
 */
var MetaMixin = exports.MetaMixin = (0, _stampit2.default)({
  methods: {

    /**
    * Sets meta.
     * @memberOf MetaMixin
    * @instance
     * @param {Meta} meta instance of {@link Meta} object
    * @returns {MetaMixin}
     * @example {@lang javascript}
    * var MyStamp = stampit().compose(MetaMixin);
    * var newObject = MyStamp().setMeta({});
     */

    setMeta: function setMeta(meta) {
      this._meta = meta;
      return this;
    },


    /**
    * Gets meta.
     * @memberOf MetaMixin
    * @instance
    * @returns {Meta}
     * @example {@lang javascript}
    * var MyStamp = stampit().compose(MetaMixin);
    * var meta = MyStamp().getMeta();
     */
    getMeta: function getMeta() {
      return this._meta;
    }
  },

  static: {

    /**
    * Sets meta and returns new {@link https://github.com/stampit-org/stampit|stampit} definition.
     * @memberOf MetaMixin
    * @static
     * @param {Meta} meta instance of {@link Meta} object
    * @returns {stampit}
     * @example {@lang javascript}
    * var MyStamp = stampit().compose(MetaMixin).setMeta({});
     */

    setMeta: function setMeta(meta) {
      return this.refs({ _meta: meta });
    },


    /**
    * Gets meta from {@link https://github.com/stampit-org/stampit|stampit} definition.
     * @memberOf MetaMixin
    * @static
    * @returns {Meta}
     * @example {@lang javascript}
    * var meta = stampit().compose(MetaMixin).getMeta();
     */
    getMeta: function getMeta() {
      return this.fixed.refs._meta;
    }
  }
});

/**
 * Used as a manager for {@link http://validatejs.org/#constraints|Constraints} object (validation). **Not** meant to be used directly.
 * @constructor
 * @type {ConstraintsMixin}

 * @property {Object} _constraints private attribute which holds constraints object

 * @example {@lang javascript}
 * var MyStamp = stampit().compose(ConstraintsMixin);
 */
var ConstraintsMixin = exports.ConstraintsMixin = (0, _stampit2.default)({
  methods: {

    /**
    * Sets constraints used for validation.
     * @memberOf ConstraintsMixin
    * @instance
     * @param {Object} constraints plain JavaScript object
    * @returns {ConstraintsMixin}
     * @example {@lang javascript}
    * var MyStamp = stampit().compose(ConstraintsMixin);
    * var newObject = MyStamp().setConstraints({});
     */

    setConstraints: function setConstraints(constraints) {
      this._constraints = constraints;
      return this;
    },


    /**
    * Gets constraints from object instance.
     * @memberOf ConstraintsMixin
    * @instance
    * @returns {Object}
     * @example {@lang javascript}
    * var MyStamp = stampit().compose(ConstraintsMixinn);
    * var constraints = MyStamp().getConstraints();
     */
    getConstraints: function getConstraints() {
      return this._constraints;
    }
  },

  static: {

    /**
    * Sets constraints in {@link https://github.com/stampit-org/stampit|stampit} definition used for validation.
     * @memberOf ConstraintsMixin
    * @static
     * @param {Object} constraints plain JavaScript object
    * @returns {stampit}
     * @example {@lang javascript}
    * var MyStamp = stampit().compose(ConstraintsMixin).setConstraints({});
     */

    setConstraints: function setConstraints(constraints) {
      return this.refs({ _constraints: constraints });
    },


    /**
    * Gets constraints from {@link https://github.com/stampit-org/stampit|stampit} definition.
     * @memberOf ConstraintsMixin
    * @static
    * @returns {Object}
     * @example {@lang javascript}
    * var constraints = stampit().compose(ConstraintsMixin).getConstraints();
     */
    getConstraints: function getConstraints() {
      return this.fixed.refs._constraints;
    }
  }
});

/**
 * Adds logging functionality.
 * @constructor
 * @type {Logger}

 * @example {@lang javascript}
 * var MyStamp = stampit().compose(Logger);
 */
var Logger = exports.Logger = (0, _stampit2.default)({
  methods: {

    /**
    * Wrapper around *console.log*.
    * @memberOf Logger
    * @instance
    */

    log: function log() {
      var env = undefined || 'test';
      if (env === 'development') {
        var _console;

        /* eslint-disable no-console */
        (_console = console).log.apply(_console, arguments);
        /* eslint-enable no-console */
      }
    }
  }
});