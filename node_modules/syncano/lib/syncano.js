'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _models = require('./models');

var _models2 = _interopRequireDefault(_models);

var _account = require('./account');

var _account2 = _interopRequireDefault(_account);

var _pinger = require('./pinger');

var _pinger2 = _interopRequireDefault(_pinger);

var _file = require('./file');

var _file2 = _interopRequireDefault(_file);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Main Syncano object.
 * @constructor
 * @type {Syncano}

 * @param {Object} options All configuration options
 * @param {Object} [options.baseUrl = 'https://api.syncano.io'] Base URL for all api calls.
 * @param {Object} [options.accountKey = null] Your Syncano account key.
 * @param {Object} [options.userKey = null] Instance user api key.
 * @param {Object} [options.socialToken = null] Instance social authentication token.
 * @param {Object} [options.defaults = {}] Object with default properties for api calls.
 * @returns {Syncano}

 * @example {@lang javascript}
 * var connection = Syncano({accountKey: '123'});
 * var connection = Syncano({userKey: '123'});
 * var connection = Syncano({socialToken: '123'});
 * var connection = Syncano({ defaults: { instanceName: 'my-instance' }});
 */
var Syncano = (0, _stampit2.default)()
// We need function here, do not use arrow syntax!
.init(function () {
  var _this = this;

  this.Account = _account2.default.setConfig(this)();
  this.Monitor = _pinger2.default.setConfig(this)();

  (0, _forEach3.default)(_models2.default, function (model, name) {
    _this[name] = model.setConfig(_this);
  });
}).refs({
  baseUrl: 'https://api.syncano.io',
  accountKey: null,
  userKey: null,
  apiKey: null,
  socialToken: null,
  defaults: {}
}).methods({
  /**
  * Sets *instanceName*.
   * @memberOf Syncano
  * @instance
   * @param {String} instanceName Instance name for all api calls
  * @returns {Syncano}
  * @throws {Error} Instance name must be a string.
   * @example {@lang javascript}
  * var connection = Syncano({accountKey: '123'});
  * connection.setInstanceName('my-instance');
   */

  setInstanceName: function setInstanceName(instanceName) {
    if ((0, _isEmpty3.default)(instanceName)) this.defaults.instanceName = null;else {
      if (!(0, _isString3.default)(instanceName)) return _bluebird2.default.reject(new Error('Instance name must be a string.'));
      this.defaults.instanceName = instanceName;
    }
    return this;
  },

  /**
  * Gets *instanceName*.
   * @memberOf Syncano
  * @instance
  * @returns {String}
   * @example {@lang javascript}
  * var connection = Syncano({accountKey: '123'});
  * var instanceName = connection.getInstanceName();
   */
  getInstanceName: function getInstanceName() {
    return this.defaults.instanceName;
  },


  /**
  * Sets *baseUrl*.
   * @memberOf Syncano
  * @instance
   * @param {String} baseUrl Base URL for all api calls
  * @returns {Syncano}
  * @throws {Error} Base URL is required.
   * @example {@lang javascript}
  * var connection = Syncano({accountKey: '123'});
  * connection.setBaseUrl('https://dummy.com/');
   */
  setBaseUrl: function setBaseUrl(baseUrl) {
    if ((0, _isEmpty3.default)(baseUrl)) return _bluebird2.default.reject(new Error('Base URL is required.'));
    this.baseUrl = baseUrl;
    return this;
  },


  /**
  * Gets *baseUrl*.
   * @memberOf Syncano
  * @instance
  * @returns {String}
   * @example {@lang javascript}
  * var connection = Syncano({accountKey: '123'});
  * var baseUrl = connection.getBaseUrl();
   */
  getBaseUrl: function getBaseUrl() {
    return this.baseUrl;
  },


  /**
  * Sets *accountKey*.
   * @memberOf Syncano
  * @instance
   * @param {String} accountKey Your {@link https://syncano.io|Syncano} account key
  * @returns {Syncano}
   * @example {@lang javascript}
  * var connection = Syncano({accountKey: '123'});
  * connection.setAccountKey('abcd');
   */
  setAccountKey: function setAccountKey(accountKey) {
    this.accountKey = accountKey;
    return this;
  },


  /**
  * Gets *accountKey*.
   * @memberOf Syncano
  * @instance
  * @returns {String}
   * @example {@lang javascript}
  * var connection = Syncano({accountKey: '123'});
  * var accountKey = connection.getAccountKey();
   */
  getAccountKey: function getAccountKey() {
    return this.accountKey;
  },


  /**
  * Sets *userKey*.
   * @memberOf Syncano
  * @instance
   * @param {String} userKey Instance user api key
  * @returns {Syncano}
   * @example {@lang javascript}
  * var connection = Syncano({userKey: '123'});
  * connection.setUserKey('abcd');
   */
  setUserKey: function setUserKey(userKey) {
    this.userKey = userKey;
    return this;
  },


  /**
  * Gets *userKey*.
   * @memberOf Syncano
  * @instance
  * @returns {String}
   * @example {@lang javascript}
  * var connection = Syncano({userKey: '123'});
  * var userKey = connection.getUserKey();
   */
  getUserKey: function getUserKey() {
    return this.userKey;
  },


  /**
  * Sets *apiKey*.
   * @memberOf Syncano
  * @instance
   * @param {String} apiKey Instance user api key
  * @returns {Syncano}
   * @example {@lang javascript}
  * var connection = Syncano({apiKey: '123'});
  * connection.setApiKey('abcd');
   */
  setApiKey: function setApiKey(apiKey) {
    this.apiKey = apiKey;
    return this;
  },


  /**
  * Gets *apiKey*.
   * @memberOf Syncano
  * @instance
  * @returns {String}
   * @example {@lang javascript}
  * var connection = Syncano({apiKey: '123'});
  * var apiKey = connection.getApiKey();
   */
  getApiKey: function getApiKey() {
    return this.apiKey;
  },


  /**
  * Sets *socialToken*.
   * @memberOf Syncano
  * @instance
   * @param {String} socialToken Instance social authentication token
  * @returns {Syncano}
   * @example {@lang javascript}
  * var connection = Syncano({socialToken: '123'});
  * connection.setSocialToken('abcd');
   */
  setSocialToken: function setSocialToken(socialToken) {
    this.socialToken = socialToken;
    return this;
  },


  /**
  * Gets *socialToken*.
   * @memberOf Syncano
  * @instance
  * @returns {String}
   * @example {@lang javascript}
  * var connection = Syncano({socialToken: '123'});
  * var socialToken = connection.getSocialToken();
   */
  getSocialToken: function getSocialToken() {
    return this.socialToken;
  },
  file: function file(content) {
    return new _file2.default(content);
  }
}).static({
  file: function file(content) {
    return new _file2.default(content);
  }
});

exports.default = Syncano;
module.exports = exports['default'];