'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _replace2 = require('lodash/replace');

var _replace3 = _interopRequireDefault(_replace2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wrapper around account endpoint. Meant to be used directly form {@link Syncano} instance.

 * @constructor
 * @type {Account}

 * @example {@lang javascript}
 * const {Account} = Syncano();
 * Account.login({email: '', password: ''}).then((user) => {
 *
 * });
 */
var Account = (0, _stampit2.default)().compose(_request2.default).props({
  _account: {
    registerPath: '/v1.1/account/register/',
    loginPath: '/v1.1/account/auth/',
    socialLoginPath: '/v1.1/account/auth/{backend}/',
    updatePath: '/v1.1/account/',
    activatePath: '/v1.1/account/activate/',
    emailPath: '/v1.1/account/resend_email/',
    resetKeyPath: '/v1.1/account/reset_key/',
    changePasswordPath: '/v1.1/account/password/',
    setPasswordPath: '/v1.1/account/password/set/',
    resetPasswordPath: '/v1.1/account/password/reset/',
    resetPasswordConfimPath: '/v1.1/account/password/reset/confirm/'
  }
}).methods({

  /**
  * A convenience method for activating an accoung.
   * @memberOf Account
  * @instance
   * @param {Object} payload
  * @param {String} payload.uid
  * @param {String} payload.token
  * @returns {Promise}
   */

  activate: function activate() {
    var payload = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var path = this._account.activatePath;
    return this.makeRequest('POST', path, { payload: payload });
  },


  /**
  * A convenience method for changing an accoung.
   * @memberOf Account
  * @instance
   * @param {Object} payload
  * @param {String} payload.current_password
  * @param {String} payload.new_password
  * @returns {Promise}
   */
  changePassword: function changePassword() {
    var payload = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var path = this._account.changePasswordPath;
    return this.makeRequest('POST', path, { payload: payload });
  },


  /**
  * A convenience method for resetting the password.
   * @memberOf Account
  * @instance
   * @param {String} email
  * @returns {Promise}
   */
  resetPassword: function resetPassword(email) {
    var path = this._account.resetPasswordPath;
    return this.makeRequest('POST', path, { payload: { email: email } });
  },


  /**
  * A convenience method for confirming password reset.
   * @memberOf Account
  * @instance
   * @param {Object} payload
  * @param {String} payload.uid
  * @param {String} payload.token
  * @param {String} payload.new_password
  * @returns {Promise}
   */
  confirmPasswordReset: function confirmPasswordReset() {
    var payload = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var path = this._account.resetPasswordConfimPath;
    return this.makeRequest('POST', path, { payload: payload });
  },


  /**
  * A convenience method for setting the password.
   * @memberOf Account
  * @param {String} password
  * @instance
   * @returns {Promise}
   */
  setPassword: function setPassword(password) {
    var path = this._account.setPasswordPath;
    return this.makeRequest('POST', path, { payload: { password: password } });
  },


  /**
  * A convenience method for resetting the account key.
   * @memberOf Account
  * @instance
   * @returns {Promise}
   */
  resetKey: function resetKey() {
    var path = this._account.resetKeyPath;
    return this.makeRequest('POST', path);
  },


  /**
  * A convenience method for creating a new account.
   * @memberOf Account
  * @instance
   * @param {Object} payload
  * @param {String} payload.email
  * @param {String} payload.password
  * @returns {Promise}
   */
  register: function register() {
    var payload = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var path = this._account.registerPath;
    return this.makeRequest('POST', path, { payload: payload });
  },


  /**
  * A convenience method for authenticating with email and password.
   * @memberOf Account
  * @instance
   * @param {Object} payload
  * @param {String} payload.email
  * @param {String} payload.password
  * @param {Boolean} [setAccountKey = true]
  * @returns {Promise}
   */
  login: function login() {
    var payload = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var setAccountKey = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    var config = this.getConfig();
    var path = this._account.loginPath;

    return this.makeRequest('POST', path, { payload: payload }).then(function (user) {
      if (setAccountKey === true) {
        config.setAccountKey(user.account_key);
      }
      return user;
    });
  },


  /**
  * A convenience method for authenticating with a social media token.
   * @memberOf Account
  * @instance
   * @param {String} backend
  * @param {String} access_token
  * @returns {Promise}
   */
  socialLogin: function socialLogin(backend, access_token) {
    var path = (0, _replace3.default)(this._account.socialLoginPath, '{backend}', backend);
    return this.makeRequest('POST', path, { payload: { access_token: access_token } });
  },


  /**
  * A convenience method for resending email.
   * @memberOf Account
  * @instance
   * @param {String} email
  * @returns {Promise}
   */
  resendEmail: function resendEmail(email) {
    var path = this._account.emailPath;
    return this.makeRequest('POST', path, { payload: { email: email } });
  },


  /**
  * A convenience method for updating your account details.
   * @memberOf Account
  * @instance
   * @param {Object} payload
  * @param {String} payload.first_name
  * @param {String} payload.last_name
  * @returns {Promise}
   */
  update: function update() {
    var payload = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var path = this._account.updatePath;
    return this.makeRequest('PUT', path, { payload: payload });
  }
});

exports.default = Account;
module.exports = exports['default'];