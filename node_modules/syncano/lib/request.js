'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduce2 = require('lodash/reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _isUndefined2 = require('lodash/isUndefined');

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _defaults2 = require('lodash/defaults');

var _defaults3 = _interopRequireDefault(_defaults2);

var _startsWith2 = require('lodash/startsWith');

var _startsWith3 = _interopRequireDefault(_startsWith2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _utils = require('./utils');

var _errors = require('./errors');

var _file = require('./file');

var _file2 = _interopRequireDefault(_file);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IS_NODE = typeof module !== 'undefined' && module.exports && typeof __webpack_require__ === 'undefined';

/**
 * Base request object **not** meant to be used directly more like mixin in other {@link https://github.com/stampit-org/stampit|stamps}.

 * @constructor
 * @type {Request}

 * @property {Object} _request
 * @property {Function} [_request.handler = superagent]
 * @property {Array} [_request.allowedMethods = ['GET', 'POST', 'DELETE', 'HEAD', 'PUT', 'PATCH']]

 * @example {@lang javascript}
 * var MyStamp = stampit().compose(Request);
 */
var Request = (0, _stampit2.default)().compose(_utils.ConfigMixin, _utils.Logger).refs({
  _request: {
    handler: _superagent2.default,
    allowedMethods: ['GET', 'POST', 'DELETE', 'HEAD', 'PUT', 'PATCH']
  }
}).methods({

  /**
   * Sets request handler, used for mocking.
   * @memberOf Request
   * @instance
   * @param {Function} handler
   * @returns {Request}
   */

  setRequestHandler: function setRequestHandler(handler) {
    this._request.handler = handler;
    return this;
  },


  /**
  * Gets request handler.
  * @memberOf Request
  * @instance
  * @returns {Function}
  */
  getRequestHandler: function getRequestHandler() {
    return this._request.handler;
  },


  /**
  * Builds full URL based on path.
   * @memberOf Request
  * @instance
   * @param {String} path path part of URL e.g: /v1.1/instances/
  * @returns {String}
   */
  buildUrl: function buildUrl(path) {
    var config = this.getConfig();

    if (!(0, _isString3.default)(path)) {
      return _bluebird2.default.reject(new Error('"path" needs to be a string.'));
    }

    if ((0, _startsWith3.default)(path, config.getBaseUrl())) {
      return path;
    }

    return '' + config.getBaseUrl() + path;
  },


  /**
  * Wrapper around {@link http://visionmedia.github.io/superagent/|superagent} which validates and calls requests.
   * @memberOf Request
  * @instance
   * @param {String} methodName e.g GET, POST
  * @param {String} path e.g /v1.1/instances/
  * @param {Object} requestOptions All options required to build request
  * @param {String} [requestOptions.type = 'json'] request type e.g form, json, png
  * @param {String} [requestOptions.accept = 'json'] request accept e.g form, json, png
  * @param {Number} [requestOptions.timeout = 15000] request timeout
  * @param {Object} [requestOptions.headers = {}] request headers
  * @param {Object} [requestOptions.query = {}] request query
  * @param {Object} [requestOptions.payload = {}] request payload
  * @returns {Promise}
   */
  makeRequest: function makeRequest(methodName, path, requestOptions) {
    var _this = this;

    var config = this.getConfig();
    var method = (methodName || '').toUpperCase();
    var options = (0, _defaults3.default)({}, requestOptions, {
      type: 'json',
      accept: 'json',
      timeout: 15000,
      headers: {},
      query: {},
      payload: {},
      responseAttr: 'body'
    });

    if ((0, _isEmpty3.default)(methodName) || !(0, _includes3.default)(this._request.allowedMethods, method)) {
      return _bluebird2.default.reject(new Error('Invalid request method: "' + methodName + '".'));
    }

    if ((0, _isEmpty3.default)(path)) {
      return _bluebird2.default.reject(new Error('"path" is required.'));
    }

    if (!(0, _isUndefined3.default)(config)) {
      if (!(0, _isEmpty3.default)(config.getAccountKey())) {
        options.headers['X-API-KEY'] = config.getAccountKey();
      }

      // Yes, we will replace account key
      if (!(0, _isEmpty3.default)(config.getApiKey())) {
        options.headers['X-API-KEY'] = config.getApiKey();
      }

      if (!(0, _isEmpty3.default)(config.getUserKey())) {
        options.headers['X-USER-KEY'] = config.getUserKey();
      }

      if (!(0, _isEmpty3.default)(config.getSocialToken())) {
        options.headers['Authorization'] = 'Token ' + config.getSocialToken();
      }
    }

    // Grab files
    var files = (0, _reduce3.default)(options.payload, function (result, value, key) {
      if (value instanceof _file2.default) {
        result[key] = value;
      }
      return result;
    }, {});

    var handler = this.getRequestHandler();
    var request = handler(method, this.buildUrl(path)).accept(options.accept).timeout(options.timeout).set(options.headers).query(options.query);

    if ((0, _isEmpty3.default)(files)) {
      request = request.type(options.type).send(options.payload);
    } else if (IS_NODE === false && typeof FormData !== 'undefined' && typeof File !== 'undefined') {
      options.type = null;
      options.payload = (0, _reduce3.default)(options.payload, function (formData, value, key) {
        formData.append(key, files[key] ? value.content : value);
        return formData;
      }, new FormData());

      request = request.type(options.type).send(options.payload);
    } else if (IS_NODE === true) {
      request = (0, _reduce3.default)(options.payload, function (result, value, key) {
        return files[key] ? result.attach(key, value.content) : result.field(key, value);
      }, request.type('form'));
    }

    return _bluebird2.default.promisify(request.end, { context: request })().then(function (response) {
      if (!response.ok) {
        return _bluebird2.default.reject(new _errors.RequestError({
          response: response,
          status: response.status,
          message: 'Bad request'
        }));
      }
      return response[options.responseAttr];
    }).catch(function (err) {
      if (err.status && err.response) {
        _this.log('\n' + method + ' ' + path + '\n' + JSON.stringify(options, null, 2) + '\n');
        _this.log('Response ' + err.status + ':', err.errors);

        if (err.name !== 'RequestError') {
          return _bluebird2.default.reject(new _errors.RequestError(err, err.response));
        }
      }
      throw err;
    });
  }
}).static({

  /**
  * Sets request handler and returns new {@link https://github.com/stampit-org/stampit|stampit} object, used for mocking.
  * @memberOf Request
  * @static
  * @returns {stampit}
  */

  setRequestHandler: function setRequestHandler(handler) {
    var _request = this.fixed.refs._request || {};
    _request.handler = handler;
    return this.refs({ _request: _request });
  },


  /**
  * Sets request handler from {@link https://github.com/stampit-org/stampit|stampit} definition.
  * @memberOf Request
  * @static
  * @returns {Function}
  */
  getRequestHandler: function getRequestHandler() {
    return this.fixed.refs._request.handler;
  }
});

exports.default = Request;
module.exports = exports['default'];