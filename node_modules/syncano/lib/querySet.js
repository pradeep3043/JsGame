'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseQuerySet = exports.BulkCreate = exports.Raw = exports.Ordering = exports.PageSize = exports.First = exports.UpdateOrCreate = exports.Update = exports.Delete = exports.List = exports.GetOrCreate = exports.Get = exports.Create = undefined;

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _defaults2 = require('lodash/defaults');

var _defaults3 = _interopRequireDefault(_defaults2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

var _errors = require('./errors');

var _errors2 = _interopRequireDefault(_errors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wrapper around plain JavaScript Array which provides two additional methods for pagination.
 * @constructor
 * @type {ResultSet}

 * @param {QuerySet}  querySet
 * @param {String}  response
 * @param {Array}  objects
 * @returns {ResultSet}

 * @property {Function}  next
 * @property {Function}  prev

 * @example {@lang javascript}
 * Instance.please().list()
 *   // get next page
 *   .then((instances) => instances.next())
 *
 *   // get prev page
 *   .then((instances) => instances.prev())
 *
 *   .then((instances) => console.log('instances', instances));
 */
var ResultSet = function ResultSet(querySet, response, objects) {
  var results = [];
  results.push.apply(results, objects);

  /**
  * Helper method which will fetch next page or throws `PaginationError`.
   * @memberOf ResultSet
  * @instance
   * @throws {PaginationError}
  * @returns {Promise}
  */
  results.next = function () {
    if (!response.next) {
      return _bluebird2.default.reject(new _errors2.default('There is no next page'));
    }

    return new _bluebird2.default(function (resolve, reject) {
      return querySet.request(response.next, { query: {} }).spread(resolve).catch(reject);
    });
  };

  /**
  * Helper method which will check if next page is available.
   * @memberOf ResultSet
  * @instance
   * @returns {Boolean}
  */
  results.hasNext = function () {
    return response.next !== null;
  };

  /**
  * Helper method which will fetch previous page or throws `PaginationError`.
   * @memberOf ResultSet
  * @instance
   * @throws {PaginationError}
  * @returns {Promise}
  */
  results.prev = function () {
    if (!response.prev) {
      return _bluebird2.default.reject(new _errors2.default('There is no previous page'));
    }

    return new _bluebird2.default(function (resolve, reject) {
      return querySet.request(response.prev, { query: {} }).spread(resolve).catch(reject);
    });
  };

  /**
  * Helper method which will check if prev page is available.
   * @memberOf ResultSet
  * @instance
   * @returns {Boolean}
  */
  results.hasPrev = function () {
    return response.prev !== null;
  };

  return results;
};

var QuerySetRequest = (0, _stampit2.default)().compose(_request2.default).refs({
  model: null
}).props({
  endpoint: 'list',
  method: 'GET',
  headers: {},

  properties: {},
  query: {},
  payload: {},
  attachments: {},
  _serialize: true
}).methods({

  /**
  * Converts raw objects to {@link https://github.com/stampit-org/stampit|stampit} instances
   * @memberOf QuerySet
  * @instance
  * @private
   * @param {Object} response raw JavaScript objects
  * @returns {Object}
  */

  serialize: function serialize(response) {
    if (this._serialize === false) {
      return response;
    }

    if (this.endpoint === 'list') {
      return this.asResultSet(response);
    }

    return this.model.fromJSON(response, this.properties);
  },


  /**
  * Converts API response into {ResultSet}
   * @memberOf QuerySet
  * @instance
  * @private
   * @param {Object} response raw JavaScript objects
  * @param {String} lookupField additional field to search for data
  * @returns {ResultSet}
  */
  asResultSet: function asResultSet(response, lookupField) {
    var _this = this;

    var objects = (0, _map3.default)(response.objects, function (object) {
      var obj = lookupField ? object[lookupField] : object;
      return _this.model.fromJSON(obj, _this.properties);
    });
    return ResultSet(this, response, objects);
  },


  /**
  * Executes current state of QuerySet
   * @memberOf QuerySet
  * @instance
   * @param {String} [requestPath = null]
  * @param {Object} [requestOptions = {}]
  * @returns {Promise}
   * @example {@lang javascript}
  * Instance.please().list().request().then(function(instance) {});
   */
  request: function request() {
    var _this2 = this;

    var requestPath = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
    var requestOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var meta = this.model.getMeta();
    var endpoint = meta.endpoints[this.endpoint] || {};
    var allowedMethods = endpoint.methods || [];
    var path = requestPath || meta.resolveEndpointPath(this.endpoint, this.properties);
    var method = this.method.toLowerCase();
    var options = (0, _defaults3.default)(requestOptions, {
      headers: this.headers,
      query: this.query,
      payload: this.payload,
      attachments: this.attachments,
      responseAttr: this.responseAttr
    });

    if (!(0, _includes3.default)(allowedMethods, method)) {
      return _bluebird2.default.reject(new Error('Invalid request method: "' + this.method + '".'));
    }

    return this.makeRequest(method, path, options).then(function (body) {
      return [_this2.serialize(body), body];
    });
  },


  /**
  * Wrapper around {@link Queryset.request} method
   * @memberOf QuerySet
  * @instance
   * @param {function} callback
  * @returns {Promise}
  */
  then: function then(callback) {
    return this.request().spread(callback);
  }
});

var Create = exports.Create = (0, _stampit2.default)().methods({

  /**
  * A convenience method for creating an object and saving it all in one step.
   * @memberOf QuerySet
  * @instance
   * @param {Object} object
  * @returns {Promise}
   * @example {@lang javascript}
  * // Thus:
  *
  * Instance
  *  .please()
  *  .create({name: 'test-one', description: 'description'})
  *  .then(function(instance) {});
  *
  * // and:
  *
  * var instance = Instance({name: 'test-one', description: 'description'});
  * instance.save().then(function(instance) {});
  *
  * // are equivalent.
   */

  create: function create(object) {
    var attrs = (0, _assign3.default)({}, this.properties, object);
    var instance = this.model(attrs);

    return instance.save();
  }
});

var Get = exports.Get = (0, _stampit2.default)().methods({

  /**
  * Returns the object matching the given lookup properties.
  * @memberOf QuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @returns {QuerySet}
   * @example {@lang javascript}
  * Instance.please().get({name: 'test-one'}).then(function(instance) {});
   */

  get: function get() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.properties = (0, _assign3.default)({}, this.properties, properties);

    this.method = 'GET';
    this.endpoint = 'detail';

    return this;
  }
});

var GetOrCreate = exports.GetOrCreate = (0, _stampit2.default)().methods({

  /**
  * A convenience method for looking up an object with the given lookup properties, creating one if necessary.
  * Successful callback will receive **object, created** arguments.
   * @memberOf QuerySet
  * @instance
   * @param {Object} properties attributes which will be used for object retrieving
  * @param {Object} defaults attributes which will be used for object creation
  * @returns {Promise}
   * @example {@lang javascript}
  * Instance
  *   .please()
  *   .getOrCreate({name: 'test-one'}, {description: 'test'})
  *   .then(function(instance, created) {});
  *
  * // above is equivalent to:
  *
  * Instance
  *   .please()
  *   .get({name: 'test-one'})
  *   .then(function(instance) {
  *     // Get
  *   })
  *   .catch(function() {
  *     // Create
  *     return Instance.please().create({name: 'test-one', description: 'test'});
  *   });
   */

  getOrCreate: function getOrCreate() {
    var _this3 = this;

    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var defaults = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    return new _bluebird2.default(function (resolve, reject) {
      _this3.get(properties).then(function (object) {
        return resolve(object, false);
      }).catch(function () {
        var attrs = (0, _assign3.default)({}, _this3.properties, properties, defaults);
        return _this3.create(attrs).then(function (object) {
          return resolve(object, true);
        }).catch(reject);
      });
    });
  }
});

var List = exports.List = (0, _stampit2.default)().methods({

  /**
  * Returns list of objects that match the given lookup properties.
   * @memberOf QuerySet
  * @instance
   * @param {Object} [properties = {}] lookup properties used for path resolving
  * @param {Object} [query = {}]
  * @returns {QuerySet}
   * @example {@lang javascript}
  * Instance.please().list().then(function(instances) {});
  * Class.please().list({instanceName: 'test-one'}).then(function(classes) {});
   */

  list: function list() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var query = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.query = (0, _assign3.default)({}, this.query, query);

    this.method = 'GET';
    this.endpoint = 'list';
    return this;
  }
});

var Delete = exports.Delete = (0, _stampit2.default)().methods({

  /**
  * Removes single object based on provided properties.
   * @memberOf QuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @returns {QuerySet}
   * @example {@lang javascript}
  * Instance.please().delete({name: 'test-instance'}).then(function() {});
  * Class.please().delete({name: 'test', instanceName: 'test-one'}).then(function() {});
   */

  delete: function _delete() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.properties = (0, _assign3.default)({}, this.properties, properties);

    this.method = 'DELETE';
    this.endpoint = 'detail';
    return this;
  }
});

var Update = exports.Update = (0, _stampit2.default)().methods({

  /**
  * Updates single object based on provided arguments
   * @memberOf QuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @param {Object} object attributes to update
  * @returns {QuerySet}
   * @example {@lang javascript}
  * Instance
    .please()
    .update({name: 'test-instance'}, {description: 'new one'})
    .then(function(instance) {});
   * Class
    .please()
    .update({name: 'test', instanceName: 'test-one'}, {description: 'new one'})
    .then(function(cls) {});
   */

  update: function update() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var object = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.payload = object;

    this.method = 'PATCH';
    this.endpoint = 'detail';
    return this;
  }
});

var TemplateResponse = (0, _stampit2.default)().methods({

  /**
  * Renders the api response as a template.
   * @memberOf QuerySet
  * @instance
   * @param {template_name} name of template to be rendered
  * @returns {QuerySet}
   * @example {@lang javascript}
  * DataObject
    .please()
    .list({instanceName: 'my-instance', className: 'my-class'})
    .templateResponse('objects_html_table')
    .then(function(objects) {});
  */

  templateResponse: function templateResponse(template_name) {
    this._serialize = false;
    this.responseAttr = 'text';
    this.query['template_response'] = template_name;
    return this;
  }
});

var UpdateOrCreate = exports.UpdateOrCreate = (0, _stampit2.default)().methods({

  /**
  * A convenience method for updating an object with the given properties, creating a new one if necessary.
  * Successful callback will receive **object, updated** arguments.
   * @memberOf QuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @param {Object} [object = {}] object with (field, value) pairs used in case of update
  * @param {Object} [defaults = {}] object with (field, value) pairs used in case of create
  * @returns {Promise}
   * @example {@lang javascript}
  * Instance
  *   .please()
  *   .updateOrCreate({name: 'test-one'}, {description: 'new-test'}, {description: 'create-test'})
  *   .then(function(instance, updated) {});
  *
  * // above is equivalent to:
  *
  * Instance
  *   .please()
  *   .update({name: 'test-one'}, {description: 'new-test'})
  *   .then(function(instance) {
  *     // Update
  *   })
  *   .catch(function() {
  *     // Create
  *     return Instance.please().create({name: 'test-one', description: 'create-test'});
  *   });
   */

  updateOrCreate: function updateOrCreate() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _this4 = this;

    var object = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var defaults = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    return new _bluebird2.default(function (resolve, reject) {
      _this4.update(properties, object).then(function (_object) {
        return resolve(_object, true);
      }).catch(function () {
        var attrs = (0, _assign3.default)({}, _this4.properties, properties, defaults);
        return _this4.create(attrs).then(function (_object) {
          return resolve(_object, false);
        }).catch(reject);
      });
    });
  }
});

var ExcludedFields = (0, _stampit2.default)().methods({
  /**
    * Removes specified fields from object response.
     * @memberOf QuerySet
    * @instance
     * @param {Object} fields
    * @returns {QuerySet}
     * @example {@lang javascript}
    * DataObject.please().list({ instanceName: 'test-instace', className: 'test-class' }).excludedFields(['title', 'author']).then(function(dataobjects) {});
     */

  excludedFields: function excludedFields() {
    var fields = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

    this.query['excluded_fields'] = fields.join();
    return this;
  }
});

var Fields = (0, _stampit2.default)().methods({
  /**
    * Selects specified fields from object.
     * @memberOf QuerySet
    * @instance
     * @param {Object} fields
    * @returns {QuerySet}
     * @example {@lang javascript}
    * DataObject.please().list({ instanceName: 'test-instace', className: 'test-class' }).fields(['title', 'author']).then(function(dataobjects) {});
     */

  fields: function fields() {
    var _fields = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

    this.query['fields'] = _fields.join();
    return this;
  }
});

var First = exports.First = (0, _stampit2.default)().methods({

  /**
  * Returns the first object matched by the lookup properties or undefined, if there is no matching object.
   * @memberOf QuerySet
  * @instance
   * @param {Object} [properties = {}]
  * @param {Object} [query = {}]
  * @returns {Promise}
   * @example {@lang javascript}
  * Instance.please().first().then(function(instance) {});
  * Class.please().first({instanceName: 'test-one'}).then(function(cls) {});
   */

  first: function first() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var query = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    return this.pageSize(1).list(properties, query).then(function (objects) {
      if (objects.length) {
        return objects[0];
      }
    });
  }
});

var PageSize = exports.PageSize = (0, _stampit2.default)().methods({

  /**
  * Sets page size.
   * @memberOf QuerySet
  * @instance
   * @param {Number} value
  * @returns {QuerySet}
   * @example {@lang javascript}
  * Instance.please().pageSize(2).then(function(instances) {});
  * Class.please({instanceName: 'test-one'}).pageSize(2).then(function(classes) {});
   */

  pageSize: function pageSize(value) {
    this.query['page_size'] = value;
    return this;
  }
});

var Ordering = exports.Ordering = (0, _stampit2.default)().methods({

  /**
  * Sets order of returned objects.
   * @memberOf QuerySet
  * @instance
   * @param {String} [value = 'asc'] allowed choices are "asc" and "desc"
  * @returns {QuerySet}
   * @example {@lang javascript}
  * Instance.please().ordering('desc').then(function(instances) {});
  * Class.please({instanceName: 'test-one'}).ordering('desc').then(function(classes) {});
   */

  ordering: function ordering() {
    var value = arguments.length <= 0 || arguments[0] === undefined ? 'asc' : arguments[0];

    var allowed = ['asc', 'desc'];
    var ordering = value.toLowerCase();

    if (!(0, _includes3.default)(allowed, ordering)) {
      throw Error('Invalid order value: "' + value + '", allowed choices are ' + allowed.join() + '.');
    }

    this.query['ordering'] = ordering;
    return this;
  }
});

var Raw = exports.Raw = (0, _stampit2.default)().methods({

  /**
  * Disables serialization. Callback will will recive raw JavaScript objects.
   * @memberOf QuerySet
  * @instance
   * @returns {QuerySet}
   * @example {@lang javascript}
  * Instance.please().raw().then(function(response) {});
  * Class.please({instanceName: 'test-one'}).raw().then(function(response) {});
   */

  raw: function raw() {
    this._serialize = false;
    return this;
  }
});

var BulkCreate = exports.BulkCreate = (0, _stampit2.default)().methods({

  /**
  * Creates many objects based on provied Array of objects.
   * @memberOf QuerySet
  * @instance
   * @param {Array} objects
  * @returns {Promise}
   * @example {@lang javascript}
  * const objects = [Instance({name: 'test1'}), Instance({name: 'tes21'})];
  * Instance.please().bulkCreate(objects).then(function(instances) {
  *   console.log('instances', instances);
  * });
   */

  bulkCreate: function bulkCreate(objects) {
    return _bluebird2.default.mapSeries(objects, function (o) {
      return o.save();
    });
  }
});

/**
 * Base class responsible for all ORM (``please``) actions.
 * @constructor
 * @type {QuerySet}

 * @property {Object}  model
 * @property {String}  [endpoint = 'list']
 * @property {String}  [method = 'GET']
 * @property {Object}  [headers = {}]
 * @property {Object}  [properties = {}]
 * @property {Object}  [query = {}]
 * @property {Object}  [payload = {}]
 * @property {Object}  [attachments = {}]
 * @property {Boolean}  [_serialize = true]
 */
var QuerySet = _stampit2.default.compose(QuerySetRequest, Create, BulkCreate, Get, GetOrCreate, List, Delete, Update, UpdateOrCreate, First, PageSize, Ordering, Fields, ExcludedFields, Raw, TemplateResponse);

var BaseQuerySet = exports.BaseQuerySet = _stampit2.default.compose(QuerySetRequest, Raw, Fields, ExcludedFields, Ordering, First, PageSize, TemplateResponse);

exports.default = QuerySet;