'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _base = require('./base');

var _querySet = require('../querySet');

var _querySet2 = _interopRequireDefault(_querySet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GroupQuerySet = (0, _stampit2.default)().compose(_querySet2.default).methods({
  /**
  * Fetches Users belonging to a group.
  * @memberOf GroupQuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @returns {GroupQuerySet}
   * @example {@lang javascript}
  * Grop.please().users({ id: 1, instanceName: 'test-one'}).then(function(users) {});
  */

  users: function users() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _getConfig = this.getConfig();

    var User = _getConfig.User;

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    return User.please().groupUsers(this.properties);
  },

  /**
  * Adds user to group.
  * @memberOf GroupQuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @param {Object} user object with user to be added
  * @returns {GroupQuerySet}
   * @example {@lang javascript}
  * Grop.please().addUser({ id: 1, instanceName: 'test-one'}, { user: 1 }).then(function(response) {});
  */
  addUser: function addUser() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var user = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var _getConfig2 = this.getConfig();

    var User = _getConfig2.User;

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    return User.please().addUserToGroup(this.properties, user);
  },

  /**
  * Deletes user from group.
  * @memberOf GroupQuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @param {Object} user object with user to be added
  * @returns {GroupQuerySet}
   * @example {@lang javascript}
  * Grop.please().deleteUser({ id: 1, instanceName: 'test-one'}, { user: 1 }).then(function(response) {});
  */
  deleteUser: function deleteUser() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var user = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var _getConfig3 = this.getConfig();

    var User = _getConfig3.User;

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    return User.please().deleteUserFromGroup(this.properties, user);
  },

  /**
  * Fetches details of a user belonging to a group.
  * @memberOf Group
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @param {Object} user object with user to be fetched
   * @example {@lang javascript}
  * Group.please().getUserDetails({ user: 1}).then(function(response) {});
  */
  getUserDetails: function getUserDetails() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var user = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var _getConfig4 = this.getConfig();

    var User = _getConfig4.User;

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    return User.please().getDetails(this.properties, user);
  },
  getUserGroups: function getUserGroups() {
    var _this = this;

    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.properties = (0, _assign3.default)({}, this.properties, properties);

    this.method = 'GET';
    this.endpoint = 'userGroups';

    return this.then(function (response) {
      return _this.model.please().asResultSet(response, 'group');
    });
  },
  getUserGroup: function getUserGroup() {
    var _this2 = this;

    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var group = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties, group);

    this.method = 'GET';
    this.endpoint = 'userGroup';

    return this.then(function (response) {
      return _this2.model.fromJSON(response.group, _this2.properties);
    });
  },
  addUserGroup: function addUserGroup() {
    var _this3 = this;

    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var group = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.payload = group;
    this.method = 'POST';
    this.endpoint = 'userGroups';

    return this.then(function (response) {
      return _this3.model.fromJSON(response.group, _this3.properties);
    });
  },
  deleteUserGroup: function deleteUserGroup() {
    var _this4 = this;

    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var group = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties, group);

    this.method = 'DELETE';
    this.endpoint = 'userGroup';

    return this.then(function (response) {
      return _this4.model.fromJSON(response.group, _this4.properties);
    });
  }
});

var GroupMeta = (0, _base.Meta)({
  name: 'group',
  pluralName: 'groups',
  endpoints: {
    'detail': {
      'methods': ['delete', 'patch', 'put', 'get'],
      'path': '/v1.1/instances/{instanceName}/groups/{id}/'
    },
    'list': {
      'methods': ['get'],
      'path': '/v1.1/instances/{instanceName}/groups/'
    },
    'userGroups': {
      'methods': ['get', 'post'],
      'path': '/v1.1/instances/{instanceName}/users/{user}/groups/'
    },
    'userGroup': {
      'methods': ['get', 'delete'],
      'path': '/v1.1/instances/{instanceName}/users/{user}/groups/{group}/'
    }
  }
});

var GroupConstraints = {
  instanceName: {
    presence: true,
    length: {
      minimum: 5
    }
  },
  label: {
    presence: true,
    string: true
  },
  description: {
    string: true
  }
};

/**
 * OO wrapper around instance groups {@link http://docs.syncano.com/v4.0/docs/groups endpoint}.
 * @constructor
 * @type {Group}

 * @property {Number} id
 * @property {String} instanceName
 * @property {String} label
 * @property {String} [description = null]
 * @property {String} [links = {}]
 * @property {Date} [created_at = null]
 * @property {Date} [updated_at = null]
 */
var Group = (0, _stampit2.default)().compose(_base.Model).setMeta(GroupMeta).setConstraints(GroupConstraints).setQuerySet(GroupQuerySet).methods({
  /**
  * Fetches Users belonging to a group.
  * @memberOf Group
  * @instance
   * @returns {Promise}
   * @example {@lang javascript}
  * Group.users().then(function(users) {});
  */

  users: function users() {
    var _getConfig5 = this.getConfig();

    var User = _getConfig5.User;

    return User.please().groupUsers({ id: this.id, instanceName: this.instanceName });
  },

  /**
  * Add user to group.
  * @memberOf Group
  * @instance
   * @returns {Promise}
   * @example {@lang javascript}
  * Group.addUser({ user: 1}).then(function(response) {});
  */
  addUser: function addUser() {
    var user = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _getConfig6 = this.getConfig();

    var User = _getConfig6.User;

    return User.please().addUserToGroup({ id: this.id, instanceName: this.instanceName }, user);
  },

  /**
  * Delete user from group.
  * @memberOf Group
  * @instance
   * @returns {Promise}
   * @example {@lang javascript}
  * Group.deleteUser({ user: 1}).then(function(response) {});
  */
  deleteUser: function deleteUser() {
    var user = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _getConfig7 = this.getConfig();

    var User = _getConfig7.User;

    return User.please().deleteUserFromGroup({ id: this.id, instanceName: this.instanceName }, user);
  },

  /**
  * Fetches details of a user belonging to a group.
  * @memberOf Group
  * @instance
   * @returns {Promise}
   * @example {@lang javascript}
  * Group.getUserDetails({ user: 1}).then(function(response) {});
  */
  getUserDetails: function getUserDetails() {
    var user = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _getConfig8 = this.getConfig();

    var User = _getConfig8.User;

    return User.please().getDetails({ id: this.id, instanceName: this.instanceName }, user);
  }
});

exports.default = Group;
module.exports = exports['default'];