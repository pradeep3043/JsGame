'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _base = require('./base');

var _querySet = require('../querySet');

var _querySet2 = _interopRequireDefault(_querySet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DataEndpointQerySet = (0, _stampit2.default)().compose(_querySet2.default).methods({

  /**
  * Fetches Data Objects matching the Data View properties.
  * @memberOf DataEndpointQerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @returns {DataEndpointQerySet}
   * @example {@lang javascript}
  * DataEndpoint.please().fetchData({name: 'dataViewName', instanceName: 'test-one'}).then(function(dataObjects) {});
   */

  fetchData: function fetchData() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.properties = (0, _assign3.default)({}, this.properties, properties);

    this.method = 'GET';
    this.endpoint = 'get';
    this._serialize = false;

    return this;
  }
});

var DataEndpointMeta = (0, _base.Meta)({
  name: 'dataview',
  pluralName: 'dataviews',
  endpoints: {
    'detail': {
      'methods': ['delete', 'patch', 'put', 'get'],
      'path': '/v1.1/instances/{instanceName}/endpoints/data/{name}/'
    },
    'list': {
      'methods': ['post', 'get'],
      'path': '/v1.1/instances/{instanceName}/endpoints/data/'
    },
    'get': {
      'methods': ['get'],
      'path': '/v1.1/instances/{instanceName}/endpoints/data/{name}/get/'
    },
    'rename': {
      'methods': ['post'],
      'path': '/v1.1/instances/{instanceName}/endpoints/data/{name}/rename/'
    },
    'clear_cache': {
      'methods': ['post'],
      'path': '/v1.1/instances/{instanceName}/endpoints/data/{name}/clear_cache/'
    }
  }
});

var DataEndpointConstraints = {
  instanceName: {
    presence: true,
    length: {
      minimum: 5
    }
  },
  name: {
    presence: true,
    string: true,
    length: {
      maximum: 64
    }
  },
  description: {
    string: true
  },
  class: {
    presence: true,
    string: true,
    length: {
      minimum: 5
    }
  },
  query: {
    object: true
  },
  excluded_fields: {
    string: true
  },
  order_by: {
    string: true
  },
  page_size: {
    numericality: {
      noStrings: true
    }
  },
  expand: {
    string: true
  }
};

/**
 * OO wrapper around data views {@link # endpoint}.
 * @constructor
 * @type {DataEndpoint}

 * @property {String} name
 * @property {String} instanceName
 * @property {Object} query
 * @property {String} excluded_fields
 * @property {String} order_by
 * @property {Number} page_size
 * @property {String} expand
 * @property {String} class
 * @property {String} [description = null]
 * @property {String} [links = {}]
 */
var DataEndpoint = (0, _stampit2.default)().compose(_base.Model).setMeta(DataEndpointMeta).setQuerySet(DataEndpointQerySet).setConstraints(DataEndpointConstraints).methods({

  /**
  * Fetches Data Objects matching the Data View properties.
  * @memberOf DataEndpoint
  * @instance
   * @param {Object}
  * @returns {Promise}
   * @example {@lang javascript}
  * DataEndpoint.please().fetchData({name: 'dataViewName', instanceName: 'test-one'}).then(function(dataObjects) {});
  */

  fetchData: function fetchData() {
    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('get', this);

    return this.makeRequest('GET', path);
  }
});

exports.default = DataEndpoint;
module.exports = exports['default'];