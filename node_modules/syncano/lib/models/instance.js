'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _base = require('./base');

var _querySet = require('../querySet');

var _querySet2 = _interopRequireDefault(_querySet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InstanceQuerySet = (0, _stampit2.default)().compose(_querySet2.default).methods({
  rename: function rename() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var object = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.payload = object;

    this.method = 'POST';
    this.endpoint = 'rename';
    return this;
  }
});

var InstanceMeta = (0, _base.Meta)({
  name: 'instance',
  pluralName: 'instances',
  endpoints: {
    'detail': {
      'methods': ['delete', 'patch', 'put', 'get'],
      'path': '/v1.1/instances/{name}/'
    },
    'list': {
      'methods': ['post', 'get'],
      'path': '/v1.1/instances/'
    },
    'rename': {
      'methods': ['post'],
      'path': '/v1.1/instances/{name}/rename/'
    }
  },
  relatedModels: ['Admin', 'Class', 'Script', 'Schedule', 'InstanceInvitation', 'ApiKey', 'Trigger', 'ScriptEndpoint', 'User', 'Group', 'GCMDevice', 'Channel', 'APNSDevice', 'Template']
});

var InstanceConstraints = {
  name: {
    presence: true,
    string: true,
    length: {
      minimum: 5
    }
  },
  description: {
    string: true
  },
  metadata: {
    object: true
  }
};

/**
 * OO wrapper around instances {@link http://docs.syncano.io/v0.1/docs/instances-list endpoint}.
 * @constructor
 * @type {Instance}

 * @property {String} name
 * @property {Object} owner
 * @property {Number} owner.id
 * @property {String} owner.email
 * @property {String} owner.first_name
 * @property {String} owner.last_name
 * @property {Boolean} owner.is_active
 * @property {Boolean} owner.has_password
 * @property {String} role
 * @property {Object} [metadata = {}]
 * @property {String} [description = null]
 * @property {String} [links = {}]
 * @property {Date} [created_at = null]
 * @property {Date} [updated_at = null]
 */
var Instance = (0, _stampit2.default)().compose(_base.Model).setMeta(InstanceMeta).methods({
  rename: function rename() {
    var payload = arguments.length <= 0 || arguments[0] === undefined ? { new_name: this.name } : arguments[0];

    var options = { payload: payload };
    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('rename', this);

    return this.makeRequest('POST', path, options);
  }
}).setQuerySet(InstanceQuerySet).setConstraints(InstanceConstraints);

exports.default = Instance;
module.exports = exports['default'];