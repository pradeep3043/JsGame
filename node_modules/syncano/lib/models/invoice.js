'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _base = require('./base');

var _querySet = require('../querySet');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InvoiceQuerySet = (0, _stampit2.default)().compose(_querySet.BaseQuerySet, _querySet.Get, _querySet.List).methods({
  pdf: function pdf() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.properties = _.assign({}, this.properties, properties);
    this.method = 'GET';
    this.endpoint = 'pdf';

    return this;
  },
  retryPayment: function retryPayment() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var payload = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = _.assign({}, this.properties, properties);
    this.method = 'POST';
    this.payload = { payload: payload };
    this.endpoint = 'retryPayment';

    return this;
  }
});

var InvoiceMeta = (0, _base.Meta)({
  name: 'invoice',
  pluralName: 'invoices',
  endpoints: {
    'detail': {
      'methods': ['get'],
      'path': '/v1.1/billing/invoices/{id}/'
    },
    'list': {
      'methods': ['get'],
      'path': '/v1.1/billing/invoices/'
    },
    'pdf': {
      'methods': ['get'],
      'path': '/v1.1/billing/invoices/{id}/pdf/'
    },
    'retryPayment': {
      'methods': ['post'],
      'path': '/v1.1/billing/invoices/{id}/retry_payment/'
    }
  }
});
/**
 * OO wrapper around Invoice.
 * @constructor
 * @type {Invoice}

 * @property {String} status
 * @property {Array} items
 * @property {String} period
 * @property {String} amount
 * @property {Number} id
 * @property {Date} [created_at = null]
 * @property {Date} [updated_at = null]
 */
var Invoice = (0, _stampit2.default)().compose(_base.Model).setQuerySet(InvoiceQuerySet).setMeta(InvoiceMeta).methods({
  pdf: function pdf() {
    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('pdf', this);

    return this.makeRequest('POST', path);
  },
  retryPayment: function retryPayment() {
    var payload = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('retryPayment', this);

    return this.makeRequest('POST', path, { payload: payload });
  }
});

exports.default = Invoice;
module.exports = exports['default'];