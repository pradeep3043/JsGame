'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _base = require('./base');

var _querySet = require('../querySet');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UserQuerySet = (0, _stampit2.default)().compose(_querySet.BaseQuerySet, _querySet.Get, _querySet.Create, _querySet.Delete, _querySet.BulkCreate, _querySet.List).methods({
  /**
  * Gets a user's groups.
  * @memberOf UserQuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @returns {Promise}
   * @example {@lang javascript}
  * User.please().getGroups({id: 1, instanceName: 'test-one'}).then(function(groups) {});
   */

  getGroups: function getGroups() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _getConfig = this.getConfig();

    var Group = _getConfig.Group;

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    return Group.please().getUserGroups(this.properties);
  },

  /**
  * Gets a user's group.
  * @memberOf UserQuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @returns {Promise}
   * @example {@lang javascript}
  * User.please().getGroup({user: 1, instanceName: 'test-one', group: 1}).then(function(group) {});
   */
  getGroup: function getGroup() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var group = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var _getConfig2 = this.getConfig();

    var Group = _getConfig2.Group;

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    return Group.please().getUserGroup(this.properties, group);
  },

  /**
  * Adds a group to user.
  * @memberOf UserQuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @param {Object} group object with id of group to be added
  * @returns {Promise}
   * @example {@lang javascript}
  * User.please().getGroup({user: 1, instanceName: 'test-one'}, {group: 1}).then(function(group) {});
   */
  addGroup: function addGroup() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var group = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var _getConfig3 = this.getConfig();

    var Group = _getConfig3.Group;

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    return Group.please().addUserGroup(this.properties, group);
  },

  /**
  * Removes a user's group.
  * @memberOf UserQuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @param {Object} group object with id of group to be added
  * @returns {Promise}
   * @example {@lang javascript}
  * User.please().deleteGroup({user: 1, instanceName: 'test-one'}, {group: 1}).then(function(group) {});
   */
  deleteGroup: function deleteGroup() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var group = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var _getConfig4 = this.getConfig();

    var Group = _getConfig4.Group;

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    return Group.please().deleteUserGroup(this.properties, group);
  },
  getDetails: function getDetails() {
    var _this = this;

    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var user = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties, user);
    this.method = 'GET';
    this.endpoint = 'groupUser';

    return this.then(function (response) {
      return _this.model.fromJSON(response.user, _this.properties);
    });
  },
  groupUsers: function groupUsers() {
    var _this2 = this;

    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'GET';
    this.endpoint = 'groupUsers';

    return this.then(function (response) {
      return _this2.model.please().asResultSet(response, 'user');
    });
  },
  addUserToGroup: function addUserToGroup() {
    var _this3 = this;

    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var user = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.payload = user;
    this.method = 'POST';
    this.endpoint = 'groupUsers';

    return this.then(function (response) {
      return _this3.model.fromJSON(response.user, _this3.properties);
    });
  },
  deleteUserFromGroup: function deleteUserFromGroup() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var user = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties, user);
    this.payload = user;
    this.method = 'DELETE';
    this.endpoint = 'groupUser';

    return this;
  },
  get: function get() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var config = this.getConfig();

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'GET';
    this.endpoint = 'detail';

    if ((0, _isEmpty3.default)(config.getAccountKey()) && !(0, _isEmpty3.default)(config.getUserKey()) && !(0, _isEmpty3.default)(config.getApiKey())) {
      this.endpoint = 'user';
    }

    return this;
  },
  update: function update() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var object = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var config = this.getConfig();

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.payload = object;
    this.method = 'PATCH';
    this.endpoint = 'detail';

    if ((0, _isEmpty3.default)(config.getAccountKey()) && !(0, _isEmpty3.default)(config.getUserKey()) && !(0, _isEmpty3.default)(config.getApiKey())) {
      this.endpoint = 'user';
    }

    return this;
  },


  /**
  * Restes user key.
  * @memberOf UserQuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @returns {Promise}
   * @example {@lang javascript}
  * User.please().resetKey({id: 1, instanceName: 'test-one'}).then(function(user) {});
   */
  resetKey: function resetKey() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'POST';
    this.endpoint = 'reset_key';

    return this;
  },


  /**
  * A convenience method for authenticating instance user with email and password.
   * @memberOf UserQuerySet
  * @instance
   * @param {Object} properties
  * @param {String} properties.instanceName
  * @param {Object} credentials
  * @param {String} credentials.email
  * @param {String} credentials.password
  * @returns {Promise}
   */
  login: function login() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var credentials = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'POST';
    this.endpoint = 'login';
    this.payload = credentials;

    return this;
  },


  /**
  * A convenience method for authenticating instance user with email and password.
   * @memberOf UserQuerySet
  * @instance
   * @param {Object} properties
  * @param {String} properties.instanceName
  * @param {String} properties.backend
  * @param {Object} credentials
  * @param {String} credentials.access_token
  * @returns {Promise}
   */
  socialLogin: function socialLogin() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var credentials = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'POST';
    this.endpoint = 'socialLogin';
    this.payload = credentials;

    return this;
  }
});

var UserMeta = (0, _base.Meta)({
  name: 'user',
  pluralName: 'users',
  endpoints: {
    'detail': {
      'methods': ['delete', 'patch', 'put', 'get'],
      'path': '/v1.1/instances/{instanceName}/users/{id}/'
    },
    'reset_key': {
      'methods': ['post'],
      'path': '/v1.1/instances/{instanceName}/users/{id}/reset_key/'
    },
    'list': {
      'methods': ['post', 'get'],
      'path': '/v1.1/instances/{instanceName}/users/'
    },
    'login': {
      'methods': ['post'],
      'path': '/v1.1/instances/{instanceName}/user/auth/'
    },
    'socialLogin': {
      'methods': ['post'],
      'path': '/v1.1/instances/{instanceName}/user/auth/{backend}/'
    },
    'user': {
      'methods': ['get', 'post', 'patch'],
      'path': '/v1.1/instances/{instanceName}/user/'
    },
    'groupUsers': {
      'methods': ['get', 'post'],
      'path': '/v1.1/instances/{instanceName}/groups/{id}/users/'
    },
    'groupUser': {
      'methods': ['get', 'delete'],
      'path': '/v1.1/instances/{instanceName}/groups/{id}/users/{user}/'
    }
  }
});

var UserConstraints = {
  instanceName: {
    presence: true,
    length: {
      minimum: 5
    }
  },
  username: {
    presence: true,
    string: true
  },
  password: {
    presence: true,
    string: true
  },
  profile: {
    object: true
  },
  'profile.owner_permissions': {
    inclusion: ['none', 'read', 'write', 'full']
  },
  'profile.group': {
    numericality: {
      noStrings: true
    }
  },
  'profile.group_permissions': {
    inclusion: ['none', 'read', 'write', 'full']
  },
  'profile.other_permissions': {
    inclusion: ['none', 'read', 'write', 'full']
  },
  'profile.channel': {
    string: true
  },
  'profile.channel_room': {
    string: true
  }
};

/**
 * OO wrapper around instance users {@link http://docs.syncano.com/v4.0/docs/user-management endpoint}.
 * @constructor
 * @type {User}

 * @property {Number} id
 * @property {String} instanceName
 * @property {String} username
 * @property {String} password
 * @property {String} user_key
 * @property {String} [links = {}]
 * @property {Date} [created_at = null]
 * @property {Date} [updated_at = null]
 */
var User = (0, _stampit2.default)().compose(_base.Model).setMeta(UserMeta).setQuerySet(UserQuerySet).setConstraints(UserConstraints).methods({
  /**
  * Gets a user's groups.
  * @memberOf User
  * @instance
  * @returns {Promise}
   * @example {@lang javascript}
  * User.please().get({instanceName: 'test-one', id: 1}).then(function(user) {
  *   user.getGroups().then(function(groups) {});
  * });
  */

  getGroups: function getGroups() {
    var _getConfig5 = this.getConfig();

    var Group = _getConfig5.Group;

    return Group.please().getUserGroups({ user: this.id, instanceName: this.instanceName });
  },

  /**
  * Gets a user's group.
  * @memberOf User
  * @instance
  * @returns {Promise}
   * @example {@lang javascript}
  * User.please().get({instanceName: 'test-one', id: 1}).then(function(user) {
  *   user.getGroup({ group: 1 }).then(function(group) {});
  * });
  */
  getGroup: function getGroup() {
    var group = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _getConfig6 = this.getConfig();

    var Group = _getConfig6.Group;

    return Group.please().getUserGroup({ user: this.id, instanceName: this.instanceName }, group);
  },

  /**
  * Adds a group to user.
  * @memberOf User
  * @instance
   * @param {Object} group object with id of group to be added
   * @returns {Promise}
   * @example {@lang javascript}
  * User.please().get({instanceName: 'test-one', id: 1}).then(function(user) {
  *   user.addGroup({ group: 1}).then(function(group) {});
  * });
  */
  addGroup: function addGroup() {
    var group = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _getConfig7 = this.getConfig();

    var Group = _getConfig7.Group;

    return Group.please().addUserGroup({ user: this.id, instanceName: this.instanceName }, group);
  },

  /**
  * Removes a user's group.
  * @memberOf User
  * @instance
   * @param {Object} group object with id of group to be added
   * @returns {Promise}
   * @example {@lang javascript}
  * User.please().get({instanceName: 'test-one', id: 1}).then(function(user) {
  *   user.deleteGroup({ group: 1}).then(function(group) {});
  * });
  */
  deleteGroup: function deleteGroup() {
    var group = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _getConfig8 = this.getConfig();

    var Group = _getConfig8.Group;

    return Group.please().deleteUserGroup({ user: this.id, instanceName: this.instanceName }, group);
  },

  /**
  * Restes user key.
  * @memberOf User
  * @instance
  * @returns {Promise}
   * @example {@lang javascript}
  * User.please().get({instanceName: 'test-one', id: 1}).then(function(user) {
  *   user.resetKey().then(function(user) {});
  * });
  */
  resetKey: function resetKey() {
    var _this4 = this;

    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('reset_key', this);

    return this.makeRequest('POST', path, {}).then(function (body) {
      return _this4.serialize(body);
    });
  }
});

exports.default = User;
module.exports = exports['default'];