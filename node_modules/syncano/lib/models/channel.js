'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChannelPoll = undefined;

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _base = require('./base');

var _request = require('../request');

var _request2 = _interopRequireDefault(_request);

var _utils = require('../utils');

var _querySet = require('../querySet');

var _querySet2 = _interopRequireDefault(_querySet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ChannelQuerySet = (0, _stampit2.default)().compose(_querySet2.default).methods({

  /**
    * Puslishes to a channel.
     * @memberOf QuerySet
    * @instance
     * @param {Object} channel
    * @param {Object} message
    * @param {String} [room = null]
    * @returns {QuerySet}
     * @example {@lang javascript}
    * Channel.please().publish({ instanceName: 'test-instace', name: 'test-class' }, { content: 'my message'});
     */

  publish: function publish(properties, message) {
    var room = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.payload = { payload: JSON.stringify(message) };

    if (room) {
      this.payload.room = room;
    }

    this.method = 'POST';
    this.endpoint = 'publish';

    return this;
  },


  /**
    * Allows polling of a channel.
     * @memberOf QuerySet
    * @instance
     * @param {Object} options
    * @param {Boolean} [start = true]
    * @returns {ChannelPoll}
     * @example {@lang javascript}
    * var poll = Channel.please().poll({ instanceName: 'test-instace', name: 'test-class' });
    *
    * poll.on('start', function() {
    *   console.log('poll::start');
    * });
    *
    * poll.on('stop', function() {
    *   console.log('poll::stop');
    * });
    *
    * poll.on('message', function(message) {
    *   console.log('poll::message', message);
    * });
    *
    * poll.on('custom', function(message) {
    *   console.log('poll::custom', message);
    * });
    *
    * poll.on('create', function(data) {
    *   console.log('poll::create', data);
    * });
    *
    * poll.on('delete', function(data) {
    *   console.log('poll::delete', data);
    * });
    *
    * poll.on('update', function(data) {
    *   console.log('poll::update', data);
    * });
    *
    * poll.on('error', function(error) {
    *   console.log('poll::error', error);
    * });
    *
    * poll.start();
    *
    */

  poll: function poll() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var start = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

    this.properties = (0, _assign3.default)({}, this.properties, properties);

    var config = this.getConfig();
    var meta = this.model.getMeta();
    var path = meta.resolveEndpointPath('poll', this.properties);

    options.path = path;

    var channelPoll = ChannelPoll.setConfig(config)(options);

    if (start === true) {
      channelPoll.start();
    }

    return channelPoll;
  },
  history: function history() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var query = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);

    this.method = 'GET';
    this.endpoint = 'history';
    this.query = query;
    this._serialize = false;

    return this;
  }
});

var ChannelMeta = (0, _base.Meta)({
  name: 'channel',
  pluralName: 'channels',
  endpoints: {
    'detail': {
      'methods': ['delete', 'patch', 'put', 'get'],
      'path': '/v1.1/instances/{instanceName}/channels/{name}/'
    },
    'list': {
      'methods': ['post', 'get'],
      'path': '/v1.1/instances/{instanceName}/channels/'
    },
    'poll': {
      'methods': ['get'],
      'path': '/v1.1/instances/{instanceName}/channels/{name}/poll/'
    },
    'publish': {
      'methods': ['post'],
      'path': '/v1.1/instances/{instanceName}/channels/{name}/publish/'
    },
    'history': {
      'methods': ['get'],
      'path': '/v1.1/instances/{instanceName}/channels/{name}/history/'
    }
  }
});

var channelConstraints = {
  instanceName: {
    presence: true,
    length: {
      minimum: 5
    }
  },
  name: {
    presence: true,
    string: true,
    length: {
      minimum: 5
    }
  },
  description: {
    string: true
  },
  type: {
    inclusion: ['default', 'separate_rooms']
  },
  group: {
    numericality: {
      noStrings: true
    }
  },
  group_permissions: {
    inclusion: ['none', 'subscribe', 'publish']
  },
  other_permissions: {
    inclusion: ['none', 'subscribe', 'publish']
  },
  custom_publish: {
    boolean: true
  }
};

/**
  * Wrapper around {@link http://docs.syncano.io/v0.1/docs/channels-poll|channels poll} endpoint which implements `EventEmitter` interface.
  * Use it via `Channel` poll method.

  * @constructor
  * @type {ChannelPoll}

  * @property {Number} [timeout = 300000] 5 mins
  * @property {String} [path = null] request path
  * @property {Number} [lastId = null] used internally in for loop
  * @property {Number} [room = null]
  * @property {Boolean} [abort = false]  used internally to conrole for loop

  * @example {@lang javascript}
  * var poll = ChannelPoll.setConfig(config)({
  *   path: '/v1.1/instances/some-instance/channels/some-channel/poll/'
  * });
  *
  * poll.on('start', function() {
  *   console.log('poll::start');
  * });
  *
  * poll.on('stop', function() {
  *   console.log('poll::stop');
  * });
  *
  * poll.on('message', function(message) {
  *   console.log('poll::message', message);
  * });
  *
  * poll.on('custom', function(message) {
  *   console.log('poll::custom', message);
  * });
  *
  * poll.on('create', function(data) {
  *   console.log('poll::create', data);
  * });
  *
  * poll.on('delete', function(data) {
  *   console.log('poll::delete', data);
  * });
  *
  * poll.on('update', function(data) {
  *   console.log('poll::update', data);
  * });
  *
  * poll.on('error', function(error) {
  *   console.log('poll::error', error);
  * });
  *
  * poll.start();
  *
  */
var ChannelPoll = exports.ChannelPoll = (0, _stampit2.default)().compose(_request2.default, _utils.EventEmittable).props({
  timeout: 1000 * 60 * 5,
  path: null,
  lastId: null,
  room: null,
  abort: false
}).methods({
  request: function request() {
    var options = {
      timeout: this.timeout,
      query: {
        last_id: this.lastId,
        room: this.room
      }
    };

    this.emit('request', options);
    return this.makeRequest('GET', this.path, options);
  },
  start: function start() {
    var _this = this;

    this.emit('start');

    // some kind of while loop which uses Promises
    var loop = function loop() {
      if (_this.abort === true) {
        _this.emit('stop');
        return;
      }

      return _this.request().then(function (message) {
        _this.emit('message', message);
        _this.emit(message.action, message);
        _this.lastId = message.id;
        return message;
      }).finally(loop).catch(function (error) {
        if (error.timeout && error.timeout === _this.timeout) {
          return _this.emit('timeout', error);
        }

        _this.emit('error', error);
        _this.stop();
      });
    };

    process.nextTick(loop);
    return this.stop;
  },
  stop: function stop() {
    this.abort = true;
    return this;
  }
});

/**
 * OO wrapper around channels {@link http://docs.syncano.io/v0.1/docs/channels-list endpoint}.
 * **Channel** has two special methods called ``publish`` and ``poll``. First one will send message to the channel and second one will create {@link http://en.wikipedia.org/wiki/Push_technology#Long_polling long polling} connection which will listen for messages.

 * @constructor
 * @type {Channel}

 * @property {String} name
 * @property {String} instanceName
 * @property {String} type
 * @property {Number} [group = null]
 * @property {String} [group_permissions = null]
 * @property {String} [other_permissions = null]
 * @property {Boolean} [custom_publish = null]

 * @example {@lang javascript}
 * Channel.please().get('instance-name', 'channel-name').then((channel) => {
 *   return channel.publish({x: 1});
 * });
 *
 * Channel.please().get('instance-name', 'channel-name').then((channel) => {
 *   const poll = channel.poll();
 *
 *   poll.on('start', function() {
 *     console.log('poll::start');
 *   });
 *
 *   poll.on('stop', function() {
 *     console.log('poll::stop');
 *   });
 *
 *   poll.on('message', function(message) {
 *     console.log('poll::message', message);
 *   });
 *
 *   poll.on('custom', function(message) {
 *     console.log('poll::custom', message);
 *   });
 *
 *   poll.on('create', function(data) {
 *     console.log('poll::create', data);
 *   });
 *
 *   poll.on('delete', function(data) {
 *     console.log('poll::delete', data);
 *   });
 *
 *   poll.on('update', function(data) {
 *     console.log('poll::update', data);
 *   });
 *
 *   poll.on('error', function(error) {
 *     console.log('poll::error', error);
 *   });
 *
 *   poll.start();
 * });
 */
var Channel = (0, _stampit2.default)().compose(_base.Model).setMeta(ChannelMeta).setQuerySet(ChannelQuerySet).methods({
  poll: function poll() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var start = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    var config = this.getConfig();
    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('poll', this);

    options.path = path;

    var channelPoll = ChannelPoll.setConfig(config)(options);

    if (start === true) {
      channelPoll.start();
    }

    return channelPoll;
  },
  publish: function publish(message) {
    var room = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

    var options = {
      payload: {
        payload: JSON.stringify(message)
      }
    };
    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('publish', this);

    if (room !== null) {
      options.payload.room = room;
    }

    return this.makeRequest('POST', path, options);
  },
  history: function history() {
    var query = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('history', this);

    return this.makeRequest('GET', path, { query: query });
  }
}).setConstraints(channelConstraints);

exports.default = Channel;