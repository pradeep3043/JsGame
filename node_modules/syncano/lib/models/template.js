'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _base = require('./base');

var _querySet = require('../querySet');

var _querySet2 = _interopRequireDefault(_querySet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TemplateQuerySet = (0, _stampit2.default)().compose(_querySet2.default).methods({
  /**
  * Renames a template.
  * @memberOf TemplateQuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @param {Object} payload object with request payload
  * @returns {Promise}
   * @example {@lang javascript}
  * Template.please().rename({name: 'my-template', instanceName: 'test-one'}, { new_name: 'new-name'}).then(function(template) {});
   */

  rename: function rename() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var payload = arguments.length <= 1 || arguments[1] === undefined ? { new_name: this.name } : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'POST';
    this.endpoint = 'rename';
    this.payload = payload;

    return this;
  },
  render: function render() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var context = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.method = 'POST';
    this.endpoint = 'render';
    this.payload = { context: context };
    this.responseAttr = 'text';
    this.raw();

    return this;
  }
});

var TemplateMeta = (0, _base.Meta)({
  name: 'template',
  pluralName: 'templates',
  endpoints: {
    'detail': {
      'methods': ['delete', 'patch', 'put', 'get'],
      'path': '/v1.1/instances/{instanceName}/snippets/templates/{name}/'
    },
    'list': {
      'methods': ['post', 'get'],
      'path': '/v1.1/instances/{instanceName}/snippets/templates/'
    },
    'rename': {
      'methods': ['post'],
      'path': '/v1.1/instances/{instanceName}/snippets/templates/{name}/rename/'
    },
    'render': {
      'methods': ['post'],
      'path': '/v1.1/instances/{instanceName}/snippets/templates/{name}/render/'
    }
  }
});

var TemplateConstraints = {
  name: {
    presence: true,
    string: true,
    length: {
      minimum: 5
    }
  },
  instanceName: {
    presence: true,
    length: {
      minimum: 5
    }
  },
  content: {
    presence: true,
    string: true
  },
  content_type: {
    presence: true,
    string: true
  },
  context: {
    object: true
  }
};

/**
 * OO wrapper around templates {@link # endpoint}.
 * @constructor
 * @type {Template}

 * @property {String} name
 * @property {String} instanceName
 * @property {String} content
 * @property {String} content_type
 * @property {Object} context
 * @property {String} [links = {}]
 */
var Template = (0, _stampit2.default)().compose(_base.Model).setMeta(TemplateMeta).setQuerySet(TemplateQuerySet).methods({
  rename: function rename() {
    var payload = arguments.length <= 0 || arguments[0] === undefined ? { new_name: this.name } : arguments[0];

    var options = { payload: payload };
    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('rename', this);

    return this.makeRequest('POST', path, options);
  },
  render: function render() {
    var context = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var options = {
      payload: { context: context },
      responseAttr: 'text'
    };
    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('render', this);

    return this.makeRequest('POST', path, options);
  }
}).setConstraints(TemplateConstraints);

exports.default = Template;
module.exports = exports['default'];