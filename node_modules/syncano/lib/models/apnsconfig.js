'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _base = require('./base');

var _querySet = require('../querySet');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var APNSConfigQuerySet = (0, _stampit2.default)().compose(_querySet.BaseQuerySet, _querySet.Update, _querySet.Get).methods({
  removeCertificate: function removeCertificate() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var payload = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.payload = payload;
    this.method = 'POST';
    this.endpoint = 'removeCertificate';
    return this;
  }
});

var APNSConfigMeta = (0, _base.Meta)({
  name: 'apnsconfig',
  pluralName: 'apnsconfig',
  endpoints: {
    'detail': {
      'methods': ['post', 'get', 'patch', 'put'],
      'path': '/v1.1/instances/{instanceName}/push_notifications/apns/config/'
    },
    'removeCertificate': {
      'methods': ['post'],
      'path': '/v1.1/instances/{instanceName}/push_notifications/apns/config/remove_certificate/'
    }
  }
});

var APNSConfigConstraints = {
  instanceName: {
    presence: true,
    length: {
      minimum: 5
    }
  }
};

/**
 * OO wrapper around instance APNS config {@link # endpoint}.
 * @constructor
 * @type {APNSConfig}

 * @property {String} instanceName
 * @property {File} production_certificate
 * @property {String} [production_certificate_name = null]
 * @property {String} production_bundle_identifier
 * @property {String} [production_expiration_date = null]
 * @property {String} development_certificate_name
 * @property {File} development_certificate
 * @property {String} development_bundle_identifier
 * @property {String} [development_expiration_date = null]
 * @property {Object} [links = {}]
 */
var APNSConfig = (0, _stampit2.default)().compose(_base.Model).setMeta(APNSConfigMeta).setQuerySet(APNSConfigQuerySet).setConstraints(APNSConfigConstraints).methods({
  removeCertificate: function removeCertificate() {
    var payload = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var meta = this.getMeta();
    var path = meta.resolveEndpointPath('removeCertificate', this);

    return this.makeRequest('POST', path, { payload: payload });
  }
});

exports.default = APNSConfig;
module.exports = exports['default'];