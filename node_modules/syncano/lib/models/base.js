'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Model = exports.Meta = undefined;

var _defaults2 = require('lodash/defaults');

var _defaults3 = _interopRequireDefault(_defaults2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _camelCase2 = require('lodash/camelCase');

var _camelCase3 = _interopRequireDefault(_camelCase2);

var _lastIndexOf2 = require('lodash/lastIndexOf');

var _lastIndexOf3 = _interopRequireDefault(_lastIndexOf2);

var _last2 = require('lodash/last');

var _last3 = _interopRequireDefault(_last2);

var _functions2 = require('lodash/functions');

var _functions3 = _interopRequireDefault(_functions2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _intersection2 = require('lodash/intersection');

var _intersection3 = _interopRequireDefault(_intersection2);

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _difference2 = require('lodash/difference');

var _difference3 = _interopRequireDefault(_difference2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _mapValues2 = require('lodash/mapValues');

var _mapValues3 = _interopRequireDefault(_mapValues2);

var _reduce2 = require('lodash/reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _union2 = require('lodash/union');

var _union3 = _interopRequireDefault(_union2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _validate2 = require('validate.js');

var _validate3 = _interopRequireDefault(_validate2);

var _querySet = require('../querySet');

var _querySet2 = _interopRequireDefault(_querySet);

var _request = require('../request');

var _request2 = _interopRequireDefault(_request);

var _errors = require('../errors');

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_validate3.default.Promise = _bluebird2.default;

_validate3.default.validators.object = function (value) {
  if (value) {
    if (!_validate3.default.isObject(value)) {
      return "is not an object";
    }
  }
  return null;
};

_validate3.default.validators.array = function (value) {
  if (value) {
    if (!_validate3.default.isArray(value)) {
      return "is not an array";
    }
  }
  return null;
};

_validate3.default.validators.boolean = function (value) {
  if (value) {
    if (typeof value !== 'boolean') {
      return "is not a boolean";
    }
  }
  return null;
};

_validate3.default.validators.string = function (value) {
  if (value) {
    if (!_validate3.default.isString(value)) {
      return "is not a string";
    }
  }
  return null;
};

/**
 * Object which holds whole configuration for {@link Model}.

 * @constructor
 * @type {Meta}

 * @property {String} [name = null]
 * @property {String} [pluralName = null]
 * @property {Array}  [properties = []]
 * @property {Array}  [endpoints = {}]
 * @property {Array}  [relatedModels = undefined]

 * @example {@lang javascript}
 * var MyMeta = Meta({name: 'test'});
 * var MyModel = SomeModel.setMeta(MyMeta);
 */
var Meta = exports.Meta = (0, _stampit2.default)().props({
  name: null,
  pluralName: null,
  properties: [],
  endpoints: {}
}).init(function (_ref) {
  var _this = this;

  var instance = _ref.instance;

  (0, _forEach3.default)(instance.endpoints, function (value) {
    value.properties = _this.getPathProperties(value.path);
    instance.properties = (0, _union3.default)(instance.properties, value.properties);
  });
}).methods({

  /**
  * Gets required properties from object. Used mostly during serialization.
  * @memberOf Meta
  * @instance
  * @param {Object} object
  * @returns {Object}
  */

  getObjectProperties: function getObjectProperties(object) {
    return (0, _reduce3.default)(this.properties, function (result, property) {
      result[property] = object[property];
      return result;
    }, {});
  },


  /**
  * Makes a copy of target and adds required properties from source.
   * @memberOf Meta
  * @instance
   * @param {Object} source
  * @param {Object} target
   * @returns {Object}
  */
  assignProperties: function assignProperties(source, target) {
    var dateFields = (0, _mapValues3.default)((0, _pick3.default)(target, ['created_at', 'updated_at', 'executed_at']), function (o) {
      return new Date(o);
    });
    return (0, _assign3.default)({}, this.getObjectProperties(source), target, dateFields);
  },
  getPathProperties: function getPathProperties(path) {
    var re = /{([^}]*)}/gi;
    var match = null;
    var result = [];

    while ((match = re.exec(path)) !== null) {
      result.push(match[1]);
    }

    return result;
  },


  /**
  * Resolves endpoint path e.g: `/v1.1/instances/{name}/` will be converted to `/v1.1/instances/someName/`.
   * @memberOf Meta
  * @instance
   * @param {String} endpointName
  * @param {Object} properties
   * @returns {String}
  */
  resolveEndpointPath: function resolveEndpointPath(endpointName, properties) {
    if ((0, _isEmpty3.default)(this.endpoints[endpointName])) {
      return _bluebird2.default.reject(new Error('Invalid endpoint name: "' + endpointName + '".'));
    }

    var endpoint = this.endpoints[endpointName];
    var diff = (0, _difference3.default)(endpoint.properties, (0, _keys3.default)(properties));
    var path = endpoint.path;

    if (diff.length) {
      return _bluebird2.default.reject(new Error('Missing path properties "' + diff.join() + '" for "' + endpointName + '" endpoint.'));
    }

    (0, _forEach3.default)(endpoint.properties, function (property) {
      path = path.replace('{' + property + '}', properties[property]);
    });

    return path;
  },


  /**
  * Looks for the first allowed method from `methodNames` for selected endpoint.
   * @memberOf Meta
  * @instance
   * @param {String} endpointName
  * @param {...String} methodNames
   * @returns {String}
  */
  findAllowedMethod: function findAllowedMethod(endpointName) {
    var endpoint = this.endpoints[endpointName];

    for (var _len = arguments.length, methodNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      methodNames[_key - 1] = arguments[_key];
    }

    var methods = (0, _intersection3.default)((0, _map3.default)(methodNames, function (m) {
      return m.toLowerCase();
    }), endpoint.methods);

    if ((0, _isEmpty3.default)(methods)) {
      return _bluebird2.default.reject(new Error('Unsupported request methods: ' + methodNames.join() + '.'));
    }

    return methods[0];
  }
});

/**
 * Base {@link https://github.com/stampit-org/stampit|stamp} for all models which wraps all raw JavaScript objects.
 * **Not** meant to be used directly more like mixin in other {@link https://github.com/stampit-org/stampit|stamps}.

 * @constructor
 * @type {Model}

 * @property {Syncano} _config private attribute which holds {@link Syncano} object
 * @property {Meta} _meta private attribute which holds {@link Meta} object
 * @property {Object} _constraints private attribute which holds validation constraints
 * @property {Request} _request private attribute which holds {@link Request} configuration
 * @property {Request} _querySet private attribute which holds {@link QuerySet} stamp

 * @example {@lang javascript}
 * var MyModel = stampit()
    .compose(Model)
    .setMeta(MyMeta)
    .setConstraints(MyConstraints);
 */
var Model = exports.Model = (0, _stampit2.default)({
  refs: {
    _querySet: _querySet2.default
  },

  static: {
    /**
    * Sets {@link QuerySet} and returns new {@link https://github.com/stampit-org/stampit|stampit} definition.
     * @memberOf Model
    * @static
     * @param {QuerySet} querySet {@link QuerySet} definition
    * @returns {Model}
     * @example {@lang javascript}
    * var MyStamp = stampit().compose(Model).setQuerySet({});
     */

    setQuerySet: function setQuerySet(querySet) {
      return this.refs({ _querySet: querySet });
    },


    /**
    * Gets {@link QuerySet} from {@link https://github.com/stampit-org/stampit|stampit} definition.
     * @memberOf Model
    * @static
    * @returns {QuerySet}
     * @example {@lang javascript}
    * var querySet = stampit().compose(Model).getQuerySet();
     */
    getQuerySet: function getQuerySet() {
      return this.fixed.refs._querySet;
    },


    /**
    * Returns {@link QuerySet} instance which allows to do ORM like operations on {@link https://syncano.io/|Syncano} API.
     * @memberOf Model
    * @static
     * @param {Object} [properties = {}] some default properties for all ORM operations
    * @returns {QuerySet}
     * @example {@lang javascript}
    * MyModel.please().list();
     */
    please: function please() {
      var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      var querySet = this.getQuerySet();
      var defaultProps = (0, _assign3.default)({}, this.getDefaultProperties(), properties);
      return querySet({
        model: this,
        properties: defaultProps,
        _config: this.getConfig()
      });
    },


    /**
    * Used only for serialization for raw object to {@link https://github.com/stampit-org/stampit|stamp}.
     * @memberOf Model
    * @static
     * @param {Object} rawJSON
    * @param {Object} [properties = {}] some default properties which will be assigned to model instance
    * @returns {Model}
     */
    fromJSON: function fromJSON(rawJSON) {
      var properties = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var meta = this.getMeta();
      var attrs = meta.assignProperties(properties, rawJSON);
      return this(attrs);
    }
  },
  methods: {

    /**
    * Checks if model instance if already saved.
    * @memberOf Model
    * @instance
    * @returns {Boolean}
    */

    isNew: function isNew() {
      return !(0, _has3.default)(this, 'links');
    },


    /**
    * Validates current model instance in context of defined constraints.
    * @memberOf Model
    * @instance
    * @returns {Object|undefined}
    */
    validate: function validate() {
      var constraints = this.getConstraints();
      var attributes = this.toJSON();

      if ((0, _isEmpty3.default)(constraints)) {
        return;
      }

      return (0, _validate3.default)(attributes, constraints);
    },


    /**
    * Serializes raw JavaScript object into {@link Model} instance.
    * @memberOf Model
    * @instance
    * @returns {Model}
    */
    serialize: function serialize(object) {
      var meta = this.getMeta();
      return this.getStamp()(meta.assignProperties(this, object));
    },


    /**
    * Creates or updates the current instance.
    * @memberOf Model
    * @instance
    * @returns {Promise}
    */
    save: function save() {
      var _this2 = this;

      var meta = this.getMeta();
      var errors = this.validate();
      var path = null;
      var endpoint = 'list';
      var method = 'POST';
      var payload = this.toJSON();

      if (!(0, _isEmpty3.default)(errors)) {
        return _bluebird2.default.reject(new _errors.ValidationError(errors));
      }

      try {
        if (!this.isNew()) {
          endpoint = 'detail';
          method = meta.findAllowedMethod(endpoint, 'PUT', 'PATCH', 'POST');
        }

        path = meta.resolveEndpointPath(endpoint, this);
      } catch (err) {
        return _bluebird2.default.reject(err);
      }

      return this.makeRequest(method, path, { payload: payload }).then(function (body) {
        return _this2.serialize(body);
      });
    },


    /**
    * Removes the current instance.
    * @memberOf Model
    * @instance
    * @returns {Promise}
    */
    delete: function _delete() {
      var meta = this.getMeta();
      var path = meta.resolveEndpointPath('detail', this);

      return this.makeRequest('DELETE', path);
    },
    toJSON: function toJSON() {
      var attrs = [
      // Private stuff
      '_config', '_meta', '_request', '_constraints', '_querySet',

      // Read only stuff
      'links', 'created_at', 'updated_at'];

      return (0, _omit3.default)(this, attrs.concat((0, _functions3.default)(this)));
    }
  }
}).init(function (_ref2) {
  var instance = _ref2.instance;
  var stamp = _ref2.stamp;

  if (!stamp.fixed.methods.getStamp) {
    stamp.fixed.methods.getStamp = function () {
      return stamp;
    };
  }
  if ((0, _has3.default)(instance, '_meta.relatedModels')) {
    (function () {
      var relatedModels = instance._meta.relatedModels;
      var properties = instance._meta.properties.slice();
      var last = (0, _last3.default)(properties);
      var lastIndex = (0, _lastIndexOf3.default)(properties, last);
      properties[lastIndex] = (0, _camelCase3.default)(instance._meta.name + ' ' + last);
      var map = {};
      map[last] = properties[lastIndex];

      map = (0, _reduce3.default)(properties, function (result, property) {
        result[property] = property;
        return result;
      }, map);

      (0, _forEach3.default)(instance.getConfig(), function (model, name) {
        if ((0, _includes3.default)(relatedModels, name)) {

          instance[model.getMeta().pluralName] = function () {
            var _properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

            var parentProperties = (0, _reduce3.default)(map, function (result, target, source) {
              var value = (0, _get3.default)(instance, source, null);

              if (value !== null) {
                result[target] = value;
              }

              return result;
            }, {});

            return (0, _stampit2.default)().compose(model).please((0, _assign3.default)(parentProperties, _properties));
          };
        }
      });
    })();
  }
  if ((0, _has3.default)(instance, '_config')) (0, _defaults3.default)(instance, instance.getDefaultProperties());
}).compose(_utils.ConfigMixin, _utils.MetaMixin, _utils.ConstraintsMixin, _request2.default);

exports.default = Model;