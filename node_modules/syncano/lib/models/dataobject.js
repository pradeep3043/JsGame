'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _add2 = require('lodash/add');

var _add3 = _interopRequireDefault(_add2);

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _stampit = require('stampit');

var _stampit2 = _interopRequireDefault(_stampit);

var _base = require('./base');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _querySet = require('../querySet');

var _querySet2 = _interopRequireDefault(_querySet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DataObjectQuerySet = (0, _stampit2.default)().compose(_querySet2.default).methods({
  /**
    * Filters DataObjects.
     * @memberOf QuerySet
    * @instance
     * @param {Object} filters
    * @returns {QuerySet}
     * @example {@lang javascript}
    * DataObject.please().list({ instanceName: 'test-instace', className: 'test-class' }).filter({ field_name: { _contains: 'Lord Of The Rings' }}).then(function(dataobjects) {});
     */

  filter: function filter() {
    var filters = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.query['query'] = JSON.stringify(filters);
    return this;
  },

  /**
    * Orders DataObject by field.
     * @memberOf QuerySet
    * @instance
     * @param {String} field
    * @returns {QuerySet}
     * @example {@lang javascript}
    * DataObject.please().list({ instanceName: 'test-instace', className: 'test-class' }).orderBy('author').then(function(dataobjects) {});
    * DataObject.please().list({ instanceName: 'test-instace', className: 'test-class' }).orderBy('-author').then(function(dataobjects) {});
     */
  orderBy: function orderBy(field) {
    this.query['order_by'] = field;
    return this;
  },

  /**
  * Updates single object based on provided arguments
   * @memberOf QuerySet
  * @instance
   * @param {Object} properties lookup properties used for path resolving
  * @param {Object} field to increment.
  * @returns {QuerySet}
   * @example {@lang javascript}
  * DataObject.please().increment({instanceName: 'my-instance', className: 'my-class', id: 1}, {views: 1})
   */
  increment: function increment() {
    var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var object = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var payload = {};
    payload[(0, _keys3.default)(object)[0]] = { _increment: object[(0, _keys3.default)(object)[0]] };
    this.properties = (0, _assign3.default)({}, this.properties, properties);
    this.payload = JSON.stringify(payload);

    this.method = 'PATCH';
    this.endpoint = 'detail';
    return this;
  },

  /**
    * Returns DataObject count.
     * @memberOf QuerySet
    * @instance
     * @returns {QuerySet}
     * @example {@lang javascript}
    * DataObject.please().list({ instanceName: 'test-instace', className: 'test-class' }).count().then(function(response) {});
     */
  count: function count() {
    this.query['include_count'] = true;
    this.raw();
    return this;
  }
});

var DataObjectMeta = (0, _base.Meta)({
  name: 'dataobject',
  pluralName: 'dataobjects',
  endpoints: {
    'detail': {
      'methods': ['delete', 'patch', 'post', 'get'],
      'path': '/v1.1/instances/{instanceName}/classes/{className}/objects/{id}/'
    },
    'list': {
      'methods': ['post', 'get'],
      'path': '/v1.1/instances/{instanceName}/classes/{className}/objects/'
    }
  }
});

var DataobjectConstraints = {
  instanceName: {
    presence: true,
    length: {
      minimum: 5
    }
  },
  className: {
    presence: true,
    string: true
  },
  owner: {
    numericality: {
      noStrings: true
    }
  },
  owner_permissions: {
    inclusion: ['none', 'read', 'write', 'full']
  },
  group: {
    numericality: {
      noStrings: true
    }
  },
  group_permissions: {
    inclusion: ['none', 'read', 'write', 'full']
  },
  other_permissions: {
    inclusion: ['none', 'read', 'write', 'full']
  },
  channel: {
    string: true
  },
  channel_room: {
    string: true
  }
};

/**
 * OO wrapper around instance data objects {@link http://docs.syncano.com/v4.0/docs/view-data-objects endpoint}.
 * This model is special because each instance will be **dynamically populated** with fields defined in related {@link Class} schema attribute.
 * @constructor
 * @type {DataObject}

 * @property {Number} id
 * @property {String} instanceName
 * @property {String} className
 * @property {Number} revision
 * @property {Number} [owner = null]
 * @property {String} [owner_permissions = null]
 * @property {Number} [group = null]
 * @property {String} [group_permissions = null]
 * @property {String} [other_permissions = null]
 * @property {String} [channel = null]
 * @property {String} [channel_room = null]

 * @property {String} [description = null]
 * @property {String} [links = {}]
 * @property {Date} [created_at = null]
 * @property {Date} [updated_at = null]
 */
var DataObject = (0, _stampit2.default)().compose(_base.Model).setMeta(DataObjectMeta).methods({
  increment: function increment(field, by) {
    if (!(0, _isNumber3.default)(this[field])) return _bluebird2.default.reject(new Error('The ' + field + ' is not numeric.'));
    if (!(0, _isNumber3.default)(by)) return _bluebird2.default.reject(new Error('The provided value is not numeric.'));

    this[field] += (0, _add3.default)(this[field], by);

    return this.save();
  }
}).setQuerySet(DataObjectQuerySet).setConstraints(DataobjectConstraints);

exports.default = DataObject;
module.exports = exports['default'];